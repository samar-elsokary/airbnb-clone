/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Wishlist } from "./Wishlist";
import { WishlistCountArgs } from "./WishlistCountArgs";
import { WishlistFindManyArgs } from "./WishlistFindManyArgs";
import { WishlistFindUniqueArgs } from "./WishlistFindUniqueArgs";
import { CreateWishlistArgs } from "./CreateWishlistArgs";
import { UpdateWishlistArgs } from "./UpdateWishlistArgs";
import { DeleteWishlistArgs } from "./DeleteWishlistArgs";
import { Listing } from "../../listing/base/Listing";
import { User } from "../../user/base/User";
import { WishlistService } from "../wishlist.service";
@graphql.Resolver(() => Wishlist)
export class WishlistResolverBase {
  constructor(protected readonly service: WishlistService) {}

  async _wishlistsMeta(
    @graphql.Args() args: WishlistCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Wishlist])
  async wishlists(
    @graphql.Args() args: WishlistFindManyArgs
  ): Promise<Wishlist[]> {
    return this.service.wishlists(args);
  }

  @graphql.Query(() => Wishlist, { nullable: true })
  async wishlist(
    @graphql.Args() args: WishlistFindUniqueArgs
  ): Promise<Wishlist | null> {
    const result = await this.service.wishlist(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Wishlist)
  async createWishlist(
    @graphql.Args() args: CreateWishlistArgs
  ): Promise<Wishlist> {
    return await this.service.createWishlist({
      ...args,
      data: {
        ...args.data,

        listing: {
          connect: args.data.listing,
        },

        user: {
          connect: args.data.user,
        },
      },
    });
  }

  @graphql.Mutation(() => Wishlist)
  async updateWishlist(
    @graphql.Args() args: UpdateWishlistArgs
  ): Promise<Wishlist | null> {
    try {
      return await this.service.updateWishlist({
        ...args,
        data: {
          ...args.data,

          listing: {
            connect: args.data.listing,
          },

          user: {
            connect: args.data.user,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wishlist)
  async deleteWishlist(
    @graphql.Args() args: DeleteWishlistArgs
  ): Promise<Wishlist | null> {
    try {
      return await this.service.deleteWishlist(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Listing, {
    nullable: true,
    name: "listing",
  })
  async getListing(
    @graphql.Parent() parent: Wishlist
  ): Promise<Listing | null> {
    const result = await this.service.getListing(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Wishlist): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
